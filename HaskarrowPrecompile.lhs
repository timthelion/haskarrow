>module HaskarrowPrecompile where

>import Language.Haskarrow.DependencyResolver
>import Language.Haskarrow.Types
>import Language.Haskarrow.CodeGenerator.GeneralFunctions
>import Language.Haskarrow.CodeGenerator.ConcurrentInit
>import Language.Haskarrow.CodeGenerator.LoudObjectCode
>import Language.Haskarrow.CodeGenerator.SequentialInit
>import Language.Haskarrow.CodeGenerator.Constants

>import Language.Haskarrow.Parser
>import Language.Haskarrow.ResolveLoudSources

import Debug.Trace

require her-lexer >= 0.1 from cabal

import Language.Haskell.Her.HaLay
import Language.Haskell.Her.FromClutterToLines

require cpphs from cabal

import Language.Preprocessor.Unlit

require split from cabal

import Data.List.Split
import Data.List

import Data.Graph

↓ Returns either HaskellCode OR AnError ↓

>precompile ::
> Bool     ->
> String   ->
> FilePath ->
> Either
>  Error
>  String

>precompile
> concurrent
> origionalSource
> fileName
>  =
> let
>  eitherValuesAndFunctionsOrAnError =
>   expandFunctions origionalSource fileName
> in
>  do
>    (values,functions,indent)
>     <- eitherValuesAndFunctionsOrAnError
>    valuesRU <- resolveDependencies values
>    valuesRR <- resolveLoudSources valuesRU
>    let
>     evaluationType
>       =
>      evaluationTypeOfInit valuesRR
>    Right ("{- AUTOGENERATED BY HASKARROW -}"++
>           functions ++ "\n" ++
>           (optionalParametersEmptyCode valuesRR indent) ++
>           (requiredParametersDataDeclaration valuesRR indent) ++
>           (optionalParametersDataDeclaration valuesRR indent) ++
>           (valuesDataDeclaration valuesRR indent) ++
>           (if concurrent
>             then
>              (generateConcurrentInit evaluationType valuesRR indent)
>             else
>              (generateSequentialInit evaluationType valuesRR indent)) ++
>           (case evaluationType of
>             Evaluated ->
>              (mainCode indent valuesRR)
>             Static -> "{-NoMain, nothing to do.-}"))
